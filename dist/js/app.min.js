/**
 * Created by zhipu.liao on 2016/3/4.
 */
"use strict";
var app = angular.module("app", ["angular-loading-bar","ngAnimate",
    'ui.router', "toastr", "ui.bootstrap","schemaForm"]).run(["$rootScope","$state","$timeout","$location",
    function($rootScope,$state,$timeout,$location){
        console.log(" start app");
        $rootScope.isLogin=sessionStorage.isLogin;
        var neeToLogin=$location.search();
        if(neeToLogin.tmethod==="login"){
            $timeout(function(){
                $state.go("home.login");
            });
        }
    }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */

/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app").config(["$httpProvider", "toastrConfig", "$locationProvider", function ($httpProvider, toastrConfig, $locationProvider) {
    $httpProvider.interceptors.push("authorInterceptor");
    $locationProvider.html5Mode({
        enabled: true,
        requireBase: true
    });
    angular.extend(toastrConfig, {
        timeOut: 2000
    });
}]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app")
    .controller("ListController", ["$rootScope","$http",  "$location", "$stateParams", "$scope", "toastr", "$state",
        function ($rootScope,$http,  $location, $stateParams, $scope, toastr, $state) {
            $scope.docs = [];
            $http({
                url:"getLog",
                method:"POST"
            }).then(function(data){
                if(data.data.status){
                    $scope.logs=data.data.model.logs.reverse();
                }else{
                    toastr.warning(data.data.msg);
                }

            });
            function getAllDocList() {
                $http({
                    url: "getAllDocs",
                    method: "POST"
                }).then(function (data) {
                    $scope.docs = data.data.model;
                    if(data.data.logined){
                        sessionStorage.setItem("isLogin",true);
                        $rootScope.isLogin=sessionStorage.isLogin;
                    }else{
                        sessionStorage.setItem("isLogin",false);
                        $rootScope.isLogin=undefined;
                    }
                    getDocList();
                }, function (data) {
                });
            }
            function getDocList() {
                $scope.docs.forEach(function (doc) {
                    $http({
                        url: "getDocument",
                        method: "POST",
                        data: {
                            name: doc.name
                        }
                    }).then(function (data) {
                        if (data.data.status) {
                            $scope.apis = data.data.model.apis;
                            doc.apiList = getApiList($scope.apis);
                        } else {
                            toastr.warning(data.data.msg);
                        }
                    });
                });

            }

            function getApiList(doc) {
                var titls = [];
                for (var i = 0; i < doc.length; i++) {
                    titls.push({idx: i, name: doc[i].name});
                }
                return titls;
            }
            getAllDocList();
            $scope.logout=function(){
                $http({
                    url:"/logout",
                    method:"POST"
                }).then(function(res){
                    sessionStorage.clear();
                    $rootScope.isLogin=sessionStorage.isLogin;
                    $state.go("home");
                })
            };
        }])
    .controller("MainController", ["$http", "$scope", "$stateParams", "toastr", "$state", "$uibModal",
        function ($http, $scope, $stateParams, toastr, $state, $uibModal) {
            $scope.apis = [];
            $http({
                url: "getDocument",
                method: "POST",
                data: {
                    name: $stateParams.docName
                }
            }).then(function (data) {
                if (data.data.status) {
                    $scope.apis.push(data.data.model.apis[$stateParams.apiIndex]);
                    $scope.documentInfo = data.data.model.docInfo;
                    $scope.documentInfo.index = $stateParams.apiIndex;
                } else {
                    toastr.warning(data.data.msg);
                }
            });
            $scope.delApi = function (index, apiName) {
                var delApiInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "confirm.html",
                    controller: "delDocumentCtl",
                    keyboard: false,
                    backdrop: "static"
                });
                delApiInstance.result.then(function (docName) {
                    if (docName) {
                        $http({
                            url: "delApi",
                            method: "POST",
                            data: {
                                index: $stateParams.apiIndex,
                                name: apiName
                            }
                        }).then(function (data) {
                            toastr.success(data.data.msg);
                            $state.transitionTo("home.doc", {
                                docName: $stateParams.docName,
                                apiIndex: 0
                            }, {
                                reload: true
                            });
                        }, function (data) {
                            toastr.warning(data.data.msg);
                        })
                    } else {
                        console.log("dismiss");
                    }
                });

            };
        }])
    .controller("NewDocumentController", ["$scope", "$http", "toastr", "$state",
        function ($scope, $http, toastr, $state) {
            $scope.newDocument = function () {
                $http({
                    url: "newDocument",
                    method: "POST",
                    data: $scope.newDocs
                }).then(function (data) {
                    if (data.data.status) {
                        toastr.success(data.data.msg);
                        $state.transitionTo("home", {}, {
                            reload: true
                        });
                    } else {
                        toastr.warning(data.data);
                    }
                }, function (data) {
                });
            };
        }])
    .controller("AddApiController", ["$scope", "toastr", "$stateParams", "$http", "$state",
        function ($scope, toastr, $stateParams, $http, $state) {
            $scope.newApi = {
                params: [],
                res: [],
                callbackParams: []
            };
            $scope.addSchema=formConfig[$stateParams.apiIndex].schema;
            $scope.addForm=formConfig[$stateParams.apiIndex].form;
            $scope.addModel=$scope.newApi;
            $scope.docType = $stateParams.apiIndex;
            $scope.addApi = function (form) {
                    $http({
                        url: "addApi",
                        method: "POST",
                        data: {
                            name: $stateParams.docName,
                            body: $scope.newApi
                        }
                    }).then(function (data) {
                        if (data.data.status) {
                            toastr.success(data.data.msg);
                            $state.transitionTo("home.doc", {
                                docName: $stateParams.docName,
                                apiIndex: 0
                            }, {
                                reload: true
                            });
                        } else {
                            toastr.warning(data.data.msg);
                        }
                    });
            }
        }])
    .controller("delDocumentCtl", ["$uibModalInstance", "$scope", "$stateParams",
        function ($uibModalInstance, $scope, $stateParams) {
            $scope.ok = function () {
                $uibModalInstance.close($stateParams.docName);
            };
            $scope.cancel = function () {
                $uibModalInstance.dismiss();
            }
        }])
    .controller("editApiCtrl", ["$scope", "$http", "toastr", "$uibModal", "$stateParams", "$state",
        function ($scope, $http, toastr, $uibModal, $stateParams, $state) {

            $http({
                url: "getDocument",
                method: "POST",
                data: {
                    name: $stateParams.docName
                }
            }).then(function (data) {
                if (data.data.status) {
                    $scope.apis = data.data.model.apis[$stateParams.apiIndex];
                    $scope.documentInfo = data.data.model.docInfo;
                    $scope.editSchema=formConfig[$scope.documentInfo.type].schema;
                    $scope.editForm=formConfig[$scope.documentInfo.type].form;
                    $scope.editModel= $scope.apis;
                } else {
                    toastr.warning(data.data.msg);
                }
            });
            $scope.submitAdd = function (form) {
                    $http({
                        url: "editApi",
                        method: "POST",
                        data: {
                            index: $stateParams.apiIndex,
                            name: $stateParams.docName,
                            api: $scope.apis
                        }
                    }).then(function (data) {
                        if (data.data.status) {
                            toastr.success(data.data.msg);
                            $state.transitionTo("home.doc", {
                                docName: $stateParams.docName,
                                apiIndex: 0
                            }, {
                                reload: true
                            });
                        } else {
                            toastr.warning(data.data.msg);
                        }
                    });
            };
        }])
    .controller("ErrorController", ["$stateParams", "$http", "$scope",
        function ($stateParams, $http, $scope) {
        $scope.docname = $stateParams.docName;
        $scope.errors = [];
        $http({
            url: "getDocument",
            method: "POST",
            data: {
                name: $stateParams.docName
            }
        }).then(function (data) {
            if (data.data.status) {
                //if (typeof data.data.model.errorCodeLst!="undefined") {
                //    $scope.errors = data.data.model.errorCodeLst;
                //} else {
                //    $scope.errors = [];
                //}
                $scope.errors = data.data.model.errorCodeLst || [];
            }
        });
    }])
    .controller("EditErrController", ["$stateParams", "$http", "toastr", "$scope",
        function ($stateParams, $http, toastr, $scope) {
            $http({
                url: "getDocument",
                method: "POST",
                data: {
                    name: $stateParams.docName
                }
            }).then(function (data) {
                if (data.data.status) {
                    //if (typeof data.data.model.errorCodeLst!="undefined") {
                    //    $scope.errors = data.data.model.errorCodeLst;
                    //} else {
                    //    $scope.errors = [];
                    //}
                    $scope.errors = data.data.model.errorCodeLst || [];
                }
            });

            $scope.addErrs = function () {
                console.log($scope.errors);
                $http({
                    url: "editErrorCode",
                    method: "POST",
                    data: {
                        name: $stateParams.docName,
                        body: $scope.errors
                    }
                }).then(function (data) {
                    if (data.data.status) {
                        toastr.success("res", data);
                        history.go(-1);
                    } else {
                        toastr.warning("服务器异常");
                    }
                });
            };
        }])
    .controller("LoginController", ["$scope", "$http","$rootScope", "toastr","$state",
        function ($scope, $http,$rootScope, toastr,$state) {

            $scope.login = function (form) {
                if (form.$valid) {
                    $http({
                        url: "login",
                        data: $scope.user,
                        method: "POST"
                    }).then(function (res) {
                        console.log(res.data);
                        if(res.data.status){
                            sessionStorage.setItem("isLogin",true);
                            $rootScope.isLogin=sessionStorage.isLogin;
                            $state.go("home");
                        }else{
                            toastr.warning(res.data.msg);
                        }
                    });
                } else {
                    toastr.warning("请输入完整登录信息");
                }
            };

        }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app")
    .directive("onErrReady", ["$timeout", function ($timeout) {
        return {
            "restrict": "A",
            link: function (scope) {
                scope.addErr = function () {
                    var err = {
                        name: "",
                        res: "",
                        description: ""
                    };
                    scope.errors.push(err);
                };
                scope.delErr = function (index) {
                    scope.errors.splice(index, 1);
                }
            }
        }
    }]);
/**
 * Created by zhipu.liao on 2016/3/15.
 */
angular.module("app")
    .filter("docType", function () {
        return function (type) {
            switch (type) {
                case "0":
                    return "api";
                    break;
                case "1":
                    return "sdk";
                    break;
                default:
                    break;
            }
        };
    });
/**
 * Created by zhipu.liao on 2016/4/13.
 */
"use strict";
var formConfig = [{
    schema: {
        type: "object",
        properties: {
            name: {
                type: "string",
                title: "请求名称",
                description: "接口的名称"
            },
            api: {
                type: "string",
                title: "请求路径",
                description: "接口路径"
            },
            method: {
                type: "string",
                title: "请求模式",
                enum: ["POST", "GET"]
            },
            params: {
                type: "array",
                title: "请求头(header)",
                items: {
                    type: "object",
                    properties: {
                        apiName: {
                            type: "string",
                            title: "参数名称"
                        },
                        type: {
                            type: "string",
                            title: "类型"
                        },
                        require: {
                            type: "string",
                            title: "是否必填",
                            default:"是"
                        },
                        apiValue: {
                            type: "string",
                            title: "说明"
                        }
                    }
                }
            },
            res: {
                type: "array",
                title: "请求参数",
                items: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                            title: "参数名称"
                        },
                        type: {
                            type: "string",
                            title: "类型"
                        },
                        require: {
                            type: "string",
                            title: "是否必填",
                            default:"是"
                        },
                        revalue: {
                            type: "string",
                            title: "说明"
                        }
                    }
                }
            },
            demo: {
                type: "string",
                title: "JSON返回示例"
            },
            description: {
                type: "string",
                title: "接口说明"
            }
        }
    },
    form: ["name", "api", "method",
        {
            key: "params",
            add: "添加",
            items: [
                {
                    "type": "section",
                    "htmlClass": "row",
                    items: [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].apiName"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].type"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].require"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].apiValue"]
                    }]
                }
            ]
        },
        {
            key: "res",
            add: "添加",
            items: [
                {
                    "type": "section",
                    "htmlClass": "row",
                    items: [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].key"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].type"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].require"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].revalue"]
                    }]
                }
            ]
        },
        {
            key: "demo",
            "type": "textarea"
        }, {
            key: "description",
            "type": "textarea"
        }, {
            type: "submit",
            title: "保存"
        }]
}];
/**
 * Created by zhipu.liao on 2016/3/4.
 */
"use strict";
angular.module("app").config(["$stateProvider", "$urlRouterProvider",
    function ($stateProvider, $urlRouterProvider) {
        var mystate = $stateProvider
            .state("home", {
                url: "/",
                templateUrl: function () {
                  return  "page/list.html?"+Math.random();
                },
                controller: "ListController"
            })
            .state("home.doc", {
                url: ":docName/:apiIndex",
                views: {
                    "apiContent": {
                        templateUrl:function () {
                            return  "page/document.html?"+Math.random();
                        },
                        controller: "MainController"
                    }
                }
            })
            .state("home.edit", {
                url: ":docName/:apiIndex/edit",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/form.html?"+Math.random();
                        },
                        controller: "editApiCtrl"
                    }
                }
            })
            .state("home.new", {
                url: "new",
                views: {
                    "main-container": {
                        templateUrl: function () {
                            return  "page/newDocument.html?"+Math.random();
                        },
                        controller: "NewDocumentController"
                    }
                }
            })
            .state("home.login", {
                url: "login",
                views: {
                    "main-container": {
                        templateUrl: function () {
                            return  "page/login.html?"+Math.random();
                        },
                        controller: "LoginController"
                    }
                }
            })
            .state("home.newApi", {
                url: ":docName/:apiIndex/newApi",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/newApi.html?"+Math.random();
                        },
                        controller: "AddApiController"
                    }
                }
            })
            .state("home.error", {
                url: ":docName/:apiIndex/errCode",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/errorCode.html?"+Math.random();
                        },
                        controller: "ErrorController"
                    }
                }
            })
            .state("home.editErr", {
                url: ":docName/edit/err",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/errorForm.html?"+Math.random();
                        },
                        controller: "EditErrController"
                    }
                }
            });
        $urlRouterProvider.otherwise("/");
    }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app").factory("authorInterceptor", ["$log", "$injector","$q","$rootScope", "$location",
    function ($log,$injector, $q,$rootScope, $location) {
        var myInterceptor = {
            request: function (config) {
                return config;
            },
            response: function (res) {


                return res || $q.when(res);
            },
            responseError: function (err) {
                /*if(!$rootScope.isLogin){
                 $injector.get('$state').go("home");
                 }*/
                console.log(err);
                return err;
            }
        };
        return myInterceptor;
    }]);