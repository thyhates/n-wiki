/**
 * Created by zhipu.liao on 2016/3/4.
 */
"use strict";
var app = angular.module("app", ["angular-loading-bar", "ngAnimate",
    'ui.router', "toastr", "ui.bootstrap", "schemaForm", "angularBootstrapNavTree","ngCookies"])
    .run(function () {
            console.log("app started...");
        });
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app")
    .service("authService", ["$log", "$injector", "$q",'$http','$cookies',
        function ($log, $injector, $q,$http,$cookies) {
            var authService=this;
            authService.login=login;
            authService.logout=logout;
            authService.checkLogin=checkLogin;
            function login(params){
                var deferred=$q.defer();
                var promise=deferred.promise;
                $http.post('login',params)
                    .then(function (res) {
                        if(res.data.status){
                            $cookies.put('token',res.data.token);
                            deferred.resolve(true)
                        }else{
                            deferred.reject(res.data.msg)
                        }
                    });
                return promise;
            }
            function logout() {
                var deferred=$q.defer();
                var promise=deferred.promise;
                $http.post('logout',{}).then(function (res) {
                    if(res.data.status){
                        $cookies.remove('token');
                        deferred.resolve();
                    }else{
                        deferred.reject();
                    }
                });
                return promise;
            }
            function checkLogin() {
                var token=$cookies.get('token');
                return !!token;
            }

        }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app").config(["$httpProvider", "toastrConfig", "$locationProvider", function ($httpProvider, toastrConfig, $locationProvider) {
    $httpProvider.interceptors.push("authorInterceptor");
    $locationProvider.html5Mode({
        enabled: true,
        requireBase: true
    });
    angular.extend(toastrConfig, {
        timeOut: 2000
    });
}]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
"use strict";
angular.module("app")
    .controller("ListController", ["docService", "authService", "logService", "$location", "$stateParams", "$scope", "toastr", "$state", "$uibModal",
        function (docService, authService, logService, $location, $stateParams, $scope, toastr, $state, $uibModal) {
            var vm = this;
            vm.docs = [];
            $scope.isLogin = authService.checkLogin();
            vm.logout = function () {
                authService.logout().then(function (res) {
                    $state.go("home");
                })
            };
            vm.deleteDoc = function () {
                var did = $stateParams.id;
                if (!did) {
                    toastr.warning('请选中要删除的文档');
                    return;
                }
                var delInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "confirm.html",
                    controller: "delDocumentCtl",
                    keyboard: false,
                    backdrop: "static"
                });
                delInstance.result.then(function () {
                    docService.delDocument(did).then(function (res) {
                        getAllDocList();
                        getLog();
                        $state.go("home");
                        toastr.success(res);
                    }, function (res) {
                        toastr.warning(res);
                    })
                }, function () {
                    console.log("delete document rejected");
                });
            };
            vm.editDoc = function () {
                var did = $stateParams.id;
                if (!did) {
                    toastr.warning('请选中要编辑的文档');
                }
                var editInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "page/editDoc.html",
                    keyboard: false,
                    controller: "editDocInfoCtrl",
                    backdrop: "static"
                });
                editInstance.result.then(function (data) {
                    location.reload();
                }, function (data) {
                });
            };
            function getLog() {
                logService.getLog().then(function (res) {
                    vm.logs = res;
                }, function (res) {
                    toastr.warning(res);
                });
            }

            function getAllDocList() {
                docService.getAllDoc().then(function (res) {
                    vm.docs = res;
                    vm.docs.forEach(function (doc) {
                        docService.getDocument(doc._id).then(function (res) {
                            doc.children = docService.getApiList(res.model || []);
                        })
                    });
                }, function (res) {
                    toastr.warning(res || '文档获取失败');
                })
            }

            getAllDocList();
            getLog();

        }])
    .controller("MainController", ["$scope", "$stateParams", "toastr", "$state", "$uibModal", "apiService",
        function ($scope, $stateParams, toastr, $state, $uibModal, apiService) {
            var vm = this;
            vm.docId = $stateParams.id;
            vm.apiId = $stateParams.aid;
            vm.delApi = function () {
                var delApiInstance = $uibModal.open({
                    animation: true,
                    templateUrl: "confirm.html",
                    controller: "delDocumentCtl",
                    keyboard: false,
                    backdrop: "static"
                });
                delApiInstance.result.then(function () {
                    apiService.deleteApi(vm.apiId).then(function () {
                        toastr.success("删除成功");
                        $state.transitionTo("home.doc", {
                            id: vm.docId,
                            aid: ""
                        }, {
                            reload: "home.doc"
                        });
                    }, function (res) {
                        toastr.warning(res);
                    })
                }, function () {
                    console.log('delete api rejected');
                });

            };
            function getApi() {
                if (!vm.apiId) {
                    return;
                }
                apiService.getApi(vm.apiId, vm.docId).then(function (res) {
                    vm.api = res.model[0];
                    vm.documentInfo = res.documentInfo[0];
                }, function (res) {
                    toastr.warning(res);
                })
            }

            getApi();
        }])
    .controller("NewDocumentController", ["$scope", "toastr", "$state", "docService",
        function ($scope, toastr, $state, docService) {
            var vm = this;
            vm.newDocs = {
                type: 0
            };
            vm.newDocument = function () {
                docService.newDocument(vm.newDocs)
                    .then(function (res) {
                        toastr.success(res);
                        $state.transitionTo("home", {}, {
                            reload: true
                        });
                    }, function (res) {
                        toastr.warning(res);
                    });
            };
        }])
    .controller("AddApiController", ["$scope", "toastr", "$uibModal", "$stateParams", "apiService", "$state",
        function ($scope, toastr, $uibModal, $stateParams, apiService, $state) {
            var vm = this;
            vm.newApi = {
                params: [],
                res: [],
                callbackParams: [],
                method:'POST'
            };
            vm.addSchema = formConfig[0].schema;
            vm.addForm = formConfig[0].form;
            vm.addModel = vm.newApi;
            vm.addApi = function (form) {
                vm.newApi.doc_id = $stateParams.id;
                apiService.addApi({
                    body: $scope.newApi
                }).then(function (res) {
                    toastr.success(res);
                    $state.transitionTo("home.doc", {
                        id: $stateParams.id
                    }, {
                        reload: true
                    });
                }, function (res) {
                    toastr.warning(res);
                })
            };
            vm.showJSONinput = function () {
                var inputJson = $uibModal.open({
                    animation: true,
                    templateUrl: "page/jsonInput.html",
                    controller: "JsonInputController",
                    keyboard: false,
                    backdrop: "static"
                });
                inputJson.result.then(function (res) {
                    try {
                        var resObj = JSON.parse(res);
                    } catch (err) {
                        toastr.warning("非法的JSON字符串!");
                    }
                    for (var key in resObj) {
                        var obj = {
                            key: key,
                            require: "是",
                            type: typeof resObj[key]
                        };
                        if (typeof resObj[key] === 'number') {
                            if (!isInt(resObj[key])) {
                                obj.type = "float";
                            } else {
                                obj.type = 'int';
                            }
                        }
                        if (typeof resObj[key] === 'object') {
                            obj.revalue = JSON.stringify(resObj[key]);
                        }
                        vm.newApi.res.push(obj);
                    }
                });
            };
            function isInt(n) {
                return n % 1 === 0;
            }
        }])
    .controller("delDocumentCtl", ["$uibModalInstance", "$scope",
        function ($uibModalInstance, $scope) {
            $scope.ok = function () {
                $uibModalInstance.close(true);
            };
            $scope.cancel = function () {
                $uibModalInstance.dismiss();
            }
        }])
    .controller("editApiCtrl", ["$scope", "apiService", "toastr", "$uibModal", "$stateParams", "$state",
        function ($scope, apiService, toastr, $uibModal, $stateParams, $state) {
            var vm = this;
            var aid = $stateParams.aid;
            var did = $stateParams.id;

            function getApi() {
                apiService.getApi(aid, did).then(function (res) {
                    vm.api = res.model[0];
                    vm.documentInfo = res.model.documentInfo;
                    vm.editSchema = formConfig[0].schema;
                    vm.editForm = formConfig[0].form;
                    vm.editModel = vm.api;
                }, function (res) {
                    toastr.warning(res);
                })
            }

            vm.showJSONinput = function () {
                var inputJson = $uibModal.open({
                    animation: true,
                    templateUrl: "page/jsonInput.html",
                    controller: "JsonInputController",
                    keyboard: false,
                    backdrop: "static"
                });
                inputJson.result.then(function (res) {
                    try {
                        var resObj = JSON.parse(res);
                    } catch (err) {
                        toastr.warning("非法的JSON字符串!");
                    }
                    for (var key in resObj) {
                        var obj = {
                            key: key,
                            require: "是",
                            type: typeof resObj[key]
                        };
                        if (typeof resObj[key] === 'number') {
                            if (!isInt(resObj[key])) {
                                obj.type = "float";
                            } else {
                                obj.type = 'int';
                            }
                        }
                        if (typeof resObj[key] === 'object') {
                            obj.revalue = JSON.stringify(resObj[key]);
                        }
                        vm.api.res.push(obj);
                    }
                });
            };
            function isInt(n) {
                return n % 1 === 0;
            }

            vm.submitAdd = function (form) {
                delete vm.api._id;
                apiService.editApi({
                    id: $stateParams.aid,
                    api: vm.api
                }).then(function (res) {
                    toastr.success(res);
                    $state.transitionTo("home.doc", {
                        id: $stateParams.id,
                        aid: $stateParams.aid
                    }, {
                        reload: "home.doc"
                    });
                }, function (res) {
                    toastr.warning(res);
                });
            };
            getApi();
        }])
    .controller("ErrorController", ["$stateParams", "docService", "$scope",
        function ($stateParams, docService, $scope) {
            var vm = this;
            vm.docId = $stateParams.id;
            vm.apiId = $stateParams.aid;
            vm.errors = [];
            docService.getDocument($stateParams.id)
                .then(function (res) {
                    vm.errors = res.documentInfo[0].errorCodeLst || [];
                });
        }])
    .controller("EditErrController", ["$stateParams", "docService", "toastr", "$scope",
        function ($stateParams, docService, toastr, $scope) {
            var vm = this;

            function getError() {
                docService.getDocument($stateParams.id)
                    .then(function (res) {
                        vm.errors = res.documentInfo[0].errorCodeLst || [];
                    });
            }
            vm.addErrs = function () {
                docService.editError({
                    id:$stateParams.id,
                    body:vm.errors
                }).then(function (res) {
                    toastr.success(res);
                    history.go(-1);
                },function (res) {
                    toastr.warning(res);
                });
            };
            vm.addErr=function () {
                vm.errors.push({});
            };
            vm.delErr=function (index) {
                vm.errors.splice(index,1);
            };
            getError();
        }])
    .controller("LoginController", ["$scope", 'toastr', "$state", "authService",
        function ($scope, toastr, $state, authService) {
            $scope.login = function (form) {
                if (form.$valid) {
                    authService.login($scope.user).then(function (res) {
                        $state.go("home", {}, {
                            reload: "home"
                        });
                    }, function (res) {
                        toastr.warning(res);
                    });
                } else {
                    toastr.warning("请输入完整登录信息");
                }
            };

        }])
    .controller("editDocInfoCtrl", ["$scope", "$uibModalInstance", "docService", "toastr", "$stateParams",
        function ($scope, $uibModalInstance, docService, toastr, $stateParams) {
            docService.getDocument($stateParams.id)
                .then(function (res) {
                    $scope.documentInfo =res.documentInfo[0];
                    $scope.add_model = $scope.documentInfo;
                },function (res) {
                    toastr.warning(res);
                });
            $scope.add_schema = {
                type: "object",
                properties: {
                    label: {
                        type: "string",
                        title: "name"
                    },
                    type: {
                        type: "string",
                        title: "docType"
                    },
                    description: {
                        type: "string",
                        title: "description"
                    }
                },
                required: ["label", "type"]
            };
            $scope.add_form = [
                "label", {
                    key: "type",
                    type: "select",
                    titleMap: {
                        "0": "api",
                        "1": "sdk"
                    }
                }, {
                    key: "description",
                    type: "textarea"
                },
                {
                    type: "submit",
                    title: "save"
                }
            ];
            $scope.hideModal = function () {
                $uibModalInstance.dismiss();
            };

            $scope.submitAdd = function (form) {
                $scope.$broadcast('schemaFormValidate');
                delete $scope.add_model._id;
                if (form.$valid && form.$dirty) {
                    docService.editDocment({
                        id: $stateParams.id,
                        info: $scope.add_model
                    }).then(function (res) {
                        toastr.success(res);
                        $uibModalInstance.close($scope.add_model);
                    },function (res) {
                        toastr.warning(res);
                        $uibModalInstance.dismiss();
                    })
                } else {
                    toastr.warning("请把表单填完整后在提交")
                }
            }
        }])
    .controller("JsonInputController", ["$scope", "$uibModalInstance", function ($scope, $uibModalInstance) {
        $scope.ok = function () {
            $uibModalInstance.close($scope.jsonInput);
        };
        $scope.cancel = function () {
            $uibModalInstance.dismiss();
        };
    }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app")
    .directive("onErrReady", ["$timeout", function ($timeout) {
        return {
            "restrict": "A",
            link: function (scope) {
                scope.addErr = function () {
                    var err = {
                        name: "",
                        res: "",
                        description: ""
                    };
                    scope.errors.push(err);
                };
                scope.delErr = function (index) {
                    scope.errors.splice(index, 1);
                }
            }
        }
    }]);
/**
 * Created by zhipu.liao on 2016/3/15.
 */
angular.module("app")
    .filter("docType", function () {
        return function (type) {
            switch (type) {
                case "0":
                    return "api";
                    break;
                case "1":
                    return "sdk";
                    break;
                default:
                    break;
            }
        };
    });
/**
 * Created by zhipu.liao on 2016/4/13.
 */
"use strict";
var formConfig = [{
    schema: {
        type: "object",
        properties: {
            label: {
                type: "string",
                title: "请求名称",
                description: "接口的名称"
            },
            api: {
                type: "string",
                title: "请求路径",
                description: "接口路径"
            },
            method: {
                type: "string",
                title: "请求模式",
                enum: ["POST", "GET"]
            },
            params: {
                type: "array",
                title: "请求头(header)",
                items: {
                    type: "object",
                    properties: {
                        apiName: {
                            type: "string",
                            title: "参数名称"
                        },
                        type: {
                            type: "string",
                            title: "类型"
                        },
                        require: {
                            type: "string",
                            title: "是否必填",
                            default:"是"
                        },
                        apiValue: {
                            type: "string",
                            title: "说明"
                        }
                    }
                }
            },
            res: {
                type: "array",
                title: "请求参数",
                items: {
                    type: "object",
                    properties: {
                        key: {
                            type: "string",
                            title: "参数名称"
                        },
                        type: {
                            type: "string",
                            title: "类型"
                        },
                        require: {
                            type: "string",
                            title: "是否必填",
                            default:"是"
                        },
                        revalue: {
                            type: "string",
                            title: "说明"
                        }
                    }
                }
            },
            demo: {
                type: "string",
                title: "JSON返回示例"
            },
            description: {
                type: "string",
                title: "接口说明"
            }
        }
    },
    form: ["label", "api", "method",
        {
            key: "params",
            add: "添加",
            items: [
                {
                    "type": "section",
                    "htmlClass": "row",
                    items: [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].apiName"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].type"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].require"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["params[].apiValue"]
                    }]
                }
            ]
        },
        {
            key: "res",
            add: "添加",
            items: [
                {
                    "type": "section",
                    "htmlClass": "row",
                    items: [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].key"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].type"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].require"]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        items: ["res[].revalue"]
                    }]
                }
            ]
        },
        {
            key: "demo",
            "type": "textarea"
        }, {
            key: "description",
            "type": "textarea"
        }, {
            type: "submit",
            title: "保存"
        }]
}];
/**
 * Created by zhipu.liao on 2016/3/4.
 */
"use strict";
angular.module("app").config(["$stateProvider", "$urlRouterProvider",
    function ($stateProvider, $urlRouterProvider) {
        var mystate = $stateProvider
            .state("home", {
                url: "/",
                templateUrl: function () {
                  return  "page/list.html?"+Math.random();
                }
            })
            .state("home.doc", {
                /**
                 * @id 文档id
                 * @aid api id
                 */

                url: ":id/:aid",
                views: {
                    "apiContent": {
                        templateUrl:function () {
                            return  "page/document.html?"+Math.random();
                        },
                        controller: "MainController"
                    }
                }
            })
            .state("home.edit", {
                url: ":id/:aid/edit",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/form.html?"+Math.random();
                        },
                        controller: "editApiCtrl"
                    }
                }
            })
            .state("home.new", {
                url: "new",
                views: {
                    "main-container": {
                        templateUrl: function () {
                            return  "page/newDocument.html?"+Math.random();
                        }
                    }
                }
            })
            .state("home.login", {
                url: "login",
                views: {
                    "main-container": {
                        templateUrl: function () {
                            return  "page/login.html?"+Math.random();
                        },
                        controller: "LoginController"
                    }
                }
            })
            .state("home.newApi", {
                url: ":id/:apiId/newApi",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/newApi.html?"+Math.random();
                        }
                    }
                }
            })
            .state("home.error", {
                url: ":id/:aid/errCode",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/errorCode.html?"+Math.random();
                        }
                    }
                }
            })
            .state("home.editErr", {
                url: ":id/:aid/edit/err",
                views: {
                    "apiContent": {
                        templateUrl: function () {
                            return  "page/errorForm.html?"+Math.random();
                        }
                    }
                }
            });
        $urlRouterProvider.otherwise("/");
    }]);
/**
 * Created by zhipu.liao on 2016/3/4.
 */
angular.module("app")
    .factory("authorInterceptor", ["$log", "$injector", "$q", "$rootScope", "$location","$cookies",
        function ($log, $injector, $q, $rootScope, $location,$cookies) {
            var myInterceptor = {
                request: function (config) {
                    if (config.data) {
                        var token = $cookies.get('token');
                        config.headers["authorization"] = 'Bearer ' + token || '';
                    }

                    return config;
                },
                response: function (res) {


                    return res || $q.when(res);
                },
                responseError: function (err) {
                    /*if(!$rootScope.isLogin){
                     $injector.get('$state').go("home");
                     }*/
                    return err;
                }
            };
            return myInterceptor;
        }])
    .factory("logService", ['$q', '$http', function ($q, $http) {
        return {
            getLog:function () {
                var deferred=$q.defer();
                var promise=deferred.promise;
                var params={

                };
                $http.post('getLog',params).then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data.model||[])
                    }else{
                        deferred.reject(res.data.msg)
                    }
                });
                return promise;
            }
        }
    }])
    .factory("docService",["$q","$http",function ($q, $http) {
        var docService={
            getAllDoc:getAllDoc,
            getDocument:getDocument,
            getApiList:getApiList,
            delDocument:delDocument,
            newDocument:newDocument,
            editDocument:editDocument,
            editError:editError
        };
        function newDocument(params) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('newDocument',params)
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data.msg);
                    }else{
                        deferred.reject(res.data.msg||'创建失败');
                    }

                });
            return promise;
        }
        function editDocument(params) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('editDocs',params)
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data.msg);
                    }else{
                        deferred.reject(res.data.msg||'创建失败');
                    }

                });
            return promise;
        }
        function getAllDoc() {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('getAllDocs',{})
                .then(function (res) {
                    deferred.resolve(res.data.model||[]);
                });
            return promise;
        }
        function getDocument(id) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('getDocument',{id:id})
                .then(function (res) {
                    deferred.resolve(res.data);
                });
            return promise;
        }
        function getApiList(apis) {
            var titls = [];
            for (var i = 0; i < apis.length; i++) {
                var doc_id = apis[i].doc_id;
                var api_id = apis[i]._id;
                var label=apis[i].label;
                titls.push({
                    label: label,
                    doc_id: doc_id,
                    api_id: api_id
                });
            }
            return titls;
        }
        function delDocument(id) {
            /**
             * @id 文档id
             *
             */
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('delDocument',{doc_id:id})
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data.msg);
                    }else{
                        deferred.reject(res.data.msg||'删除失败');
                    }

                });
            return promise;
        }
        function editError(params) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('editErrorCode',params)
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data.msg);
                    }else{
                        deferred.reject('编辑失败');
                    }
                });
            return promise;
        }
        return docService;
    }])
    .factory("apiService",["$q","$http",function ($q, $http) {
        var apiService={
            getApi:getApi,
            deleteApi:deleteApi,
            addApi:addApi,
            editApi:editApi
        };
        function getApi(id, did) {
            /**
             * @id api id
             * @did document id
             */
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('selectApi',{
                id:id,
                doc_id:did
            })
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data);
                    }else{
                        deferred.reject(res.data.msg||'接口获取失败');
                    }
                },function (res) {
                    deferred.reject(res.data.msg||'接口获取失败');
                });
            return promise;
        }
        function deleteApi(id) {
            var deferred=$q.defer();
            var promise=deferred.promise;

            $http.post('delApi',{
                id:id,
                doc_id:did
            })
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data);
                    }else{
                        deferred.reject(res.data.msg||'接口删除失败');
                    }
                },function (res) {
                    deferred.reject(res.data.msg||'接口删除失败');
                });
            return promise;
        }
        function addApi(params) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('addApi',params)
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data);
                    }else{
                        deferred.reject(res.data.msg||'接口添加失败');
                    }
                },function (res) {
                    deferred.reject(res.data.msg||'接口添加失败');
                });
            return promise;
        }
        function editApi(params) {
            var deferred=$q.defer();
            var promise=deferred.promise;
            $http.post('editApi',params)
                .then(function (res) {
                    if(res.data.status){
                        deferred.resolve(res.data);
                    }else{
                        deferred.reject(res.data.msg||'接口添加失败');
                    }
                },function (res) {
                    deferred.reject(res.data.msg||'接口添加失败');
                });
            return promise;
        }
        return apiService;
    }]);